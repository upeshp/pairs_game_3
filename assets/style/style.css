/* ADD RESET TO ALL ITEMS */
* {
  padding: 0;
  margin: 0; /* margin will never be counted as elements dimensions */
  box-sizing: border-box; /* can use either content-box or border-box, border-box includes padding and border values into element’s total width and height, i.e. so not added as extra */
}

body {
    height: 100vh; /* i.e. 100% of the availible space */
    background-color: #060ab2; /* i.e. the blue background */
    display: flex; /* to display container in centre... */
}



/* MEMORY GAME CONTAINERS */

.memory-game {
    /* border: 2px solid lime; /* add border to better visualise */
    width: 640px; /* set width & height */
    height: 640px; /* set width & height */
    display: flex; /* when apply flex to a container: each one of you will take same amount of space on screen, container items will be positioned in 1 row, from left to right, stretched out across container height */
    flex-wrap: wrap;
    margin: auto; /* to display container in centre... */
    perspective: 1000px; /* To produce the 3D flip effect, we will add the perspective property to .memory-game. That property sets how far in the z plane the object is from the user. The lower the value the bigger the perspective effect. For a subtle effect, let’s apply 1000px: */
}

.memory-card {
    /* border: 2px solid aqua; /* add border to better visualise */
    width: calc(25% - 10px); /* as board has 3 rows, 4 cards each, however need to override flex-wrap above - calc bit makes it 10px from margin */
    height: calc(33.333% 10px); /* as board has 3 rows, 4 cards each, however need to override flex-wrap above - calc bit makes it 10px from margin */
    position: relative; /* see below, need this to be positioned relative to screen, this is parent of front-face & back-face */ 
    margin: 5px; /* adds space in between cards, but goes over the container, so change the width/height % above */
    transform: scale(1); /* to enable transition below */
    transform-style: preserve-3d; /* To the .memory-card elements let’s add transform-style: preserve-3d, to position them in the 3D space created in the parent, instead of flattening it to the z = 0 plane (transform-style). */
    transition: transform .5s; /* a transition has to be applied to the transform property to produce the movement effect */
}

/* ADD CLICK EFFECT */
.memory-card:active {
    transform: scale(.97); /* The :active pseudo class will be triggered every time the element gets clicked. It will apply a .2s transition to its size */
    transition: transform .2s; /* to make tranisition smoother */
}

/* FOR FLIP EFFECT, SET THE FLIP CLASS */
.memory-card.flip {
    transform: rotateY(180deg); /* when flip class is active, rotate Y axis */
} 

.front-face, .back-face {
    /* border: 2px solid deeppink; /* add border to better visualise */
    position: absolute; /* position fron and back on top of each other */ /* absolute means have to position relative to parent (i.e. nearest positioned ancestor), if not positioned i.e. relative then won't work */
    width: 100%; /* width and height 100% of container */
    height: 100%; /* width and height 100% of container */
    padding: 20px; /* general stying - padding the image*/
    border-radius: 5px; /* general stying - radius of border */
    background: #1c7ccc; /* general stying - colour of background*/
    backface-visibility: hidden; /* when you flip card inverts, not what we want, so need to hide the backface...*/
}

.front-face {
    transform: rotateY(180deg); /*...now backface hidden, need to rotate on y-axis to see it*/
}







/*
 * Styles for congratulations modal
 */

.overlay {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    transition: opacity 500ms;
    visibility: hidden;
    opacity: 0;
}

.overlay:target {
    visibility: visible;
    opacity: 1;
}
  
.popup {
    margin: 70px auto;
    padding: 20px;
    background: #ffffff;
    border-radius: 5px;
    width: 85%;
    position: relative;
    transition: all 5s ease-in-out;
    font-family: 'Gloria Hallelujah', cursive;
}
  
.popup h2 {
    margin-top: 0;
    color: #333;
    font-family: Tahoma, Arial, sans-serif;
}

.popup .close {
    position: absolute;
    top: 20px;
    right: 30px;
    transition: all 200ms;
    font-size: 30px;
    font-weight: bold;
    text-decoration: none;
    color: #333;
}

.popup .close:hover {
    color: #E5F720;
}

.popup .content-1,
.content-2 {
    max-height: 30%;
    overflow: auto;
    text-align: center;
}

.show {
    visibility: visible !important;
    opacity: 100 !important;
}

#starRating li {
    display: inline-block;
}

#play-again {
    background-color: #141214;
    padding: 0.7rem 1rem;
    font-size: 1.1rem;
    display: block;
    margin: 0 auto;
    width: 50%;
    font-family: 'Gloria Hallelujah', cursive;
    color: #ffffff;
    border-radius: 5px;
}
